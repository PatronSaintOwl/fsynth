$begin

$loadadm(maml_html5.adm)

$colorrule(funny)([a-e])($rgb(10,0,130)($sup($1)))
$colorrule(funny)([e-k])($rgb(150,0,0)($italic($1)))
$colorrule(funny)([l-p])($rgb(100,100,0)($big($1)))
$colorrule(funny)([p-z])($rgb(0,100,100)($sub($big($1))))
$colorizer(funny)

$define(article)(0)()

$input(basis.maml)

$define(p)(0)($par$par)
$define(bigtitle)(1)($center($big($big($big($big($big($1)))))))
$define(title)(1)($center($big($big($1))))
$define(em)(1)($italic($1))

$bigtitle(Fragment)
$title(The Collaborative Spectral Synthesizer)
$par
$center(by Julien Verneuil - $mailto(contact@fsynth.com)(contact@fsynth.com))
$p$par

$center($big(This is the HTML documentation of the Fragment synthesizer.))

$par

$center($tlink($image(580)(images/fsynth_ui.png))(https://www.fsynth.com))

$par
$p
$center($bold(Table of Contents))$par
$tableofcontents

$section(introduction)(Introduction)

The $bold($tlink(Fragment synthesizer)(https://www.fsynth.com)) (also called fsynth) is a collaborative web-based musical instrument which allow direct manipulation of the sound spectrum by the use of on-the-fly GPU (Graphics Processing Unit) programming.
$p
Fragment is stereophonic, polyphonic, multitimbral, it support live coding of audio and visuals at the same time.
$p
Fragment is first and foremost a powerfull additive synthesizer which let you have complete control over the sound spectrum in real-time with direct visual feedback.
$par

$subsection(history)(History)

$par

In 2009, i discovered the $tlink(Virtual ANS)(http://www.warmplace.ru/soft/ans/) synthesizer by $tlink(Alexander Zolotov)(http://www.warmplace.ru),
a software emulation of the Russian photoelectronic synthesizer $tlink(ANS)(http://en.wikipedia.org/wiki/ANS_synthesizer) which was created by the Russian engineer $tlink(Evgeny Murzin)(http://en.wikipedia.org/wiki/Evgeny_Murzin) from 1938 to 1958.
$p
I was blown away by the remarquable possibilities offered by the Virtual ANS which let you draw the sound spectrum over time, i then discovered programs such as MetaSynth or $tlink(HighC)(https://highc.org), this is how i started to experiment with the "drawn sound" method.
$p
Fragment started in 2015, when i was making the first prototype of a web-based ANS-like synthesizer software which is still a work in progress, a prototype of Fragment was made in a single week, 
the prototype was quite mature but lacked in features, i considered Fragment as a pretty but failed experiment at the time.
$p
In the summer 2016 while i was releasing the prototype source code, i played with it again and after tweaking the GLSL code, i was able to make some nice sounds and envision what would be possible with this technology, so i started to think about that prototype again and come up with many ideas that would make Fragment more functional and easier to use, the real work begun.
$p
After many hours spent crafting the software, the first version of Fragment was released in January 2017, it was quite limited at that time, Fragment has now improved alot.
$par

$subsection(capabilities)(Capabilities)

$par

$list(
	$item Powerful additive synthesizer
		$list($item Powered by WebAudio oscillators $item Powered by $ref(fas)(FAS), an independent program $item Powered by a wavetable )
	$item Stereophonic
	$item Monaural
	$item Polyphonic
		$list($item Automatically detected from the GPU capabilities $item 16 notes minimum $item 704 notes with a GeForce GTX 970 GPU)
	$item Multitimbral
	$item Aliasing free
	$item Adjustable audio output channel per slices
		$list($item Multiple audio channels are only supported with $ref(fas)(FAS))
	$item Shader inputs, webcam, textures and more
	$item Real-time audio output analysis
		$list($item WebAudio only)
	$item MIDI Enabled
		$list($item Only with WebMIDI API enabled browsers (Google Chrome) $item Hot plugging of MIDI devices is supported)
	$item Collaborative app.
		$list($item MIDI and shader inputs are not synchronized between users)
	$item Live coding/JIT compilation of shader code
	$item Global and per sessions settings automatic saving/loading
	$item No authentifications (sessions based)
	$item Per-sessions discussion system)

$subsection(systemrequirements)(System requirements)

$par

Fragment is a special kind of additive synthesizer and require a great deal of processing power in order to work properly, a medium-end GPU and CPU should work fine.

$par

$subsubsection(browser)(Browser)

$par

Fragment require a browser with full support for ECMAScript 5, CSS3, WebAudio and WebGL.

$p
Well-tested and compatible browsers include Firefox 51.x and Chrome 55.x but Fragment may work with previous version of those browsers as well.
$p
It is known to work on recent version of Safari and Opera as well.

$p

Fragment support the WebGL 2 API which improve performances and enable some advanced features which are only available if the browser support the WebGL 2 API.

$par

$subsubsection(cpu)(CPU)

$par

Fragment may be quite hungry in term of computing resources, a dual core with high clock speed is recommended, a CPU with more cores can be useful if you just want to use the browser for audio output.
$p
Several methods are provided to synthesize sounds, each with performances pros and cons:
$par
$list(
	$item $ref(fas)(FAS) ($bold(recommended)): $list($item Very fast $item Multiple output support with soundcard choice $item Many settings $item Can run on a dedicated computer such as a Raspberry PI $item Dedicated program which receive Fragment data over the network)
	$item WebAudio oscillators: $list($item Fastest under Chrome $item May not work with Firefox $item Require a fast CPU $item Integrated global "release" envelope)
	$item Wavetable (not recommended): $list($item Most compatible browser method $item Will produce crackles))

$subsubsection(gpu)(GPU)

$par

Fragment was developed and tested with a NVIDIA GeForce GTX 970 GPU, a powerful GPU may be required if:
$par
$list(
	$item you want a greater score resolution
	$item you want to do visuals alongside audio
	$item you are doing complex things/use many inputs in your shader
	$item you want greater polyphonic/harmonics capabilities)

$section(howitwork)(Technical details)

Fragment is an additive synthesizer, it let you have full control over the timbral qualities of your sounds by the mean of GPU programming.
$p
Unlike other additive synthesizer software, there is no need for knobs, sliders or any other controllers to sculpt your sounds, all of that is done by generating visuals which will determine your sounds harmonic content and dynamic characteristics.
$p
While Fragment may seem overwhelming at first, the only thing that is required to produce sounds with it is to know how to generate the visuals.
$p
The goal of this section is to clarify the inner working of Fragment.
$p

$subsection(additive)(Additive synthesis)

$par

Fragment is first and foremost a powerful additive synthesizer which make an extended use of additive synthesis.
$p
Additive synthesis is a sound synthesis technique that creates timbre by adding sine waves together.
$p
Adding sine waves produce a timbre, the timbre qualities is defined by its harmonic content and dynamic characteristics of the harmonic content.
$p
Fragment can produce any timbres with precise accuracy.
$p
The only limit to the amount of sine waves that can be added by Fragment is the limit of the available processing power.
$p
For example, on a Raspberry PI 3 (1.2GHz 64-bit quad-core ARMv8 CPU) ~700 oscillators can be played simultaneously using two cores.
$p

$subsection(score)(The graphical score)

$par

Fragment graphical score represent the sound spectrum which is generated by the GPU from a fragment program.
$p
The fragment program (also known as fragment shaders) is executed by the GPU and compute the color and other attributes of each "fragment" - a technical term which usually mean a single pixel.
$p
The graphical score represent a kind of sonic canvas where the X axis represent time and the Y axis represent frequencies, you "paint" the graphical score by writing a fragment program which will be executed for each pixels of the graphical score.
$p
What you hear in Fragment is determined by the choice of "slices" of the graphical score, slices are vertical bits of the graphical score which are merged together and produce an audible result.
$p
The frequency mapping of the graphical score is fixed by a logarithmic formula, altough the formula cannot be changed right now, some parameters are available in the settings dialog to fine tune the frequency map.
$p
The frequency mapping is defined by the formula:
$par

$latex($$f(y)=a*(2^{\frac{y}{n/o}})$$)

Where:

$list(
	$item $bold(a) is is the starting frequency
	$item $bold(y) the vertical position
	$item $bold(n) the number of oscillators (which is the height of the canvas)
	$item $bold(o) the octave count)

$par

$subsection(fas)(FAS)

$par

FAS (Fragment Audio Server) is the Fragment synthesis engine acting as a server, it is an external independent program written with the C language for very fast audio synthesis.

$p

It is recommended to use Fragment with FAS enabled or use the standalone version of Fragment which include FAS.

$p

The advantage of using FAS is that it provide the best audio performances along with audio device choice, multiple audio output per slices, sample rate choice and realtime scheduling under Linux.

$p

Fragment communicate with FAS by sending data through the network when the FAS option is enabled, FAS can run on any machines independently of the Fragment application, it gather the pixels data from Fragment in real-time, compute things and deliver the audio through the selected audio device.

$p

FAS can be downloaded on the Fragment $tlink(homepage)(https://www.fsynth.com), it can also be compiled from sources on $tlink(GitHub)(https://github.com/grz0zrg/fas).

$p

FAS is provided as an executable for the following platforms at the moment:

$list(
	$item Windows x86/x64 32/64 bits
	$item Linux x86/x64 32/64 bits
	$item Raspberry PI (~700 oscillators can play at the same time under optimized system))

Here is a list of the program arguments which FAS support (along with the default settings if not provided):

$list(
	$item --h
	$list(
		$item show the program arguments)
	$item --device -1
	$list(
		$item the id of the audio device to use (running FAS without arguments once will print the devices found along with their id and informations))
	$item --iface 127.0.0.1
	$list(
		$item the address on which to listen)
	$item --port 3003
	$list(
		$item the network port on which to listen)
	$item --output_channels 2
	$list(
		$item the number of output channels, the value must be an even number)
	$item --alsa_realtime_scheduling 0
	$list(
		$item enable/disabled ALSA realtime scheduling, a Linux only parameter)
	$item --sample_rate 44100
	$list(
		$item can be any sample rate supported by the selected audio device)
	$item --frames 512
	$list(
		$item the audio buffer size, this have an effect on audio latency and CPU usage)
	$item --wavetable_size 8192
	$list(
		$item the wavetable size, the default value should be enough for most uses)
	$item --fps 60
	$list(
		$item this setting is provided in case Fragment does not capture slices at 60 fps, on most setup Fragment try to capture slices at 60 fps)
	$item --ssl 0
		$list(
			$item this is provided to use FAS over SSL (not recommended at all!))
	$item --max_height 4096
		$list(
			$item if you set the score height above 4096 pixels in Fragment, keep in mind that you must increase this!)
	$item --deflate 0
		$list(
			$item a value of 1 will enable deflate compressed packets (not recommended))
	$item --rx_buffer_size 4096
		$list(
			$item FAS will fragment packets which are bigger than the default value)
	$item --frames_queue_size 7
		$list(
			$item this is the length of the maximum number of frames waiting in the queue
			$item this is an important parameter, if you increase this too much the audio will be delayed)
	$item --commands_queue_size 16
		$list(
			$item this is the same as frames_queue_size except for commands (gain changes etc.)
			$item should be a power of 2 and positive integer))
	
Once run, you can stop the FAS application by pressing any keys.

$p

$section(sessions)(Sessions)

$par

Fragment sessions are isolated spaces which are open to all peoples who has access to the session name, they can be joined by going to the Fragment $tlink(homepage)(https://www.fsynth.com) or by typing the session name directly into the address bar as demonstrated below.

$p

You can join any sessions directly from your browser address bar by replacing "yoursessionname" for the URL shown below by the session name you want to join or create:

$p

$center(https://www.fsynth.com/app/$bold(yoursessionname))

$par

Fragment store sessions content and settings on a server which mean that any of the synchronizable actions in the session such as the code editor content, canvas settings, slices and $ref(uniformsdialog)(uniform inputs) are automatically saved $bold(if) Fragment is connected.

$p

Fragment synchronize the code editor content, slices, canvas settings and $ref(uniformsdialog)(uniform inputs) across all the users in the session in real-time which mean that you can jam with your friends if you share the session URL.

$p

Note that MIDI note messages are not synchronized between users due to technical constraints but you can still add $ref(uniformsdialog)(uniform inputs) and assign MIDI devices to control them, their values are synchronized between users but it might be not real-time.

$p

Some settings are saved locally on your browser, some of them are global (like the username and settings related to the editor) and some of them are saved per sessions such as the MIDI settings and gain.

$p

Fragment is respectful of the user and does not store any informations related to the user outside the boundary designed by the application focus.

$p

$section(homepage)(The homepage)

$par

The Fragment $tlink(homepage)(https://www.fsynth.com) can be used to retrieve the various sessions that you joined, a sessions list will be shown once you joined at least one session.

$tlink($center($image(600)(images/homepage_sessions.png)))(images/homepage_sessions.png)

$par

You can join a session from the list by clicking on it and by clicking on the door icon.

$p

You can remove a session from the list by clicking on it and by clicking on the trash icon.

$p

You can also clear the sessions history by clicking on the corresponding button, it will not delete the session content, just your settings for that session, a deleted session can be joined back from the homepage form or by the browser address bar if you know its name.

$p

$section(gui)(User interface)

$par


$tlink($center($image(600)(images/ui_help.png)))(images/ui_help.png)
$tlink($center(Click to view the full image))(images/ui_help.png)

$p

Fragment user interface is quite easy to get once you figure out its layout.

$p

It is composed of a few parts with very specific roles, here is the list of parts along with detailed informations of their functions and supported actions.

$p

$subsection(dialogs)(Dialogs)

$par

There is many dialogs in Fragment, they are composed of a title bar with some actions, the dialog content and sometimes a status bar, dialogs hover above the rest of the application, you can move them around and close them, some are also resizable, minimizable and detachable in a separate window.

$p

To resize them, place your mouse cursor on the bottom left corner of the dialog, click and drag to the desired size.

$p

$tlink($center($image(600)(gif/dialog_resize.gif)))(gif/dialog_resize.gif)

$par

A mnimized dialog will take less space on the screen by only displaying the title bar.

$p

Here is a list of dialog actions (in the order by which they appear from left to right):

$p

$tlink($center($image(74)(images/dialog_actions.png)))(images/dialog_actions.png)

$list(
	$item close the dialog
	$item minimize/maximize
	$item detach the dialog in a new window)

$subsection(infobar)(The information bar)

$par

The information bar at the top convey minor and major informations such as (in order from left to right):

$list(
	$item connectivity status
	$list(
		$item a red indicator signal that the connection to this service failed
		$item the service name can be found by hovering the cursor on the icon)
	$item your online name
	$list(
		$item you can change your username by clicking on it)
	$item various informations which can be enabled or disabled in the settings dialog such as:
	$list(
		$item the current frequency under the mouse cursor
		$item the actual number of simultaneous MIDI notes
		$item the actual number of oscillators playing)
	$item the playback time
	$item a gain controller (master volume))

$subsection(graphicalscore)(The graphical score)

$par

You can slice the graphical score by right-clicking on it and clicking on the + icon, this will add a vertical bar which will capture that part of the canvas.

$p

$tlink($center($image(600)(gif/add_slices.gif)))(gif/add_slices.gif)

$par

You are free to add any number of slices, adding many slices may have an impact on performances.

$p

$subsubsection(graphicalscoreslice)(Slice)

$par

Slices are an important part of Fragment, there will be no sounds if you don't add at least one slice.

$p

The purpose of slices is to capture vertical parts of the canvas which will be fed to the additive synthesis engine, they are like turntable needles, they can be dragged around in real-time by the mouse or by a MIDI controller.

$p

Slices can be moved by dragging them on the X axis, to do so, maintain the left mouse button on a slice and move the mouse cursor around on the horizontal axis.

$p

$tlink($center($image(600)(gif/dragging_slices.gif)))(gif/dragging_slices.gif)

$par

Double-clicking on a slice open its settings dialog directly:

$p

$tlink($center($image(326)(images/slice_settings.png)))(images/slice_settings.png)

$par

The following actions are possible by right-clicking on a slice:

$list(
	$item mute/unmute
	$list($item the synthesis engine will ignore a muted slice)
	$item open the slice settings which posses the following controllers:
	$list(
		$item X Offset: the slice horizontal position which can be controlled by a MIDI controller
		$item Y Shift: a non-represented vertical position which will pitch the slice audio up or down
		$item $ref(fas)(FAS) Output channel: the l/r output channel which will be used by FAS for that slice)
	$item deletion)

Here is how you can mute a slice:

$p

$tlink($center($image(600)(gif/mute_slice.gif)))(gif/mute_slice.gif)

$par

Here is how you can delete a slice:

$p

$tlink($center($image(600)(gif/remove_slices.gif)))(gif/remove_slices.gif)

$p

$subsection(toolbar)(The toolbar)

$par

$tlink($center($image(574)(images/toolbar.png)))(images/toolbar.png)

$par

The toolbar is a collection of tools and settings which are grouped by sections, here is a detailed list of the toolbar items (in order from left to right):

$list(
	$item help
	$item social
	$list(
		$item session live chat
		$item direct link to the community board)
	$item settings
  $list(
  	$item $ref(globalsettingsdialog)(session and global settings)
  	$item $ref(midisettingsdialog)(MIDI settings))
  $item transport
  $list(
  	$item reset playback time to 0
  	$item play/pause
  	$item $ref(fas)(FAS enable/disable))
  $item helpers
  $list(
  	$item $tlink(ShaderToy)(https://www.shadertoy.com) converter
  	$item canvas axis details which appear when the canvas is hovered by the cursor
  	$item $ref(analysis)(analysis dialog) (not working when FAS is enabled)
  	$item clone the code editor in a separate window)
	$item fragment inputs
	$list(
		$item $ref(uniformsdialog)(uniforms)
		$item $ref(finputs)(add complex inputs)))

$subsection(finputs)(The fragment inputs)

$par

Fragment inputs are complex inputs which can be used in the fragment program as a 2D texture.

$p

The fragment inputs panel is a list of the added complex inputs, each of them appear as a thumbnail near the $bold(add complex inputs button), nothing will be shown if no complex inputs were added.

$p

All complex inputs can be used as 2D textures (texture2d) in the fragment program, they are defined as $bold(iInputN) where N is the id of the input starting from 0.

$p

You can find the input id by hovering over the thumbnail or in the title of the complex input settings dialog.

$p

You can add one by clicking on the "add complex inputs" button, here is a list of the available complex inputs:

$list(
	$item image file
	$item webcam
	$list(
		$item allow the real-time webcam video to be used in the fragment program)
	$item audio file)
	
By right clicking on a the complex input thumbnail, the following actions appear:

$list(
	$item delete
	$item complex input settings dialog)

$tlink($center($image(600)(gif/fragment_input.gif)))(gif/fragment_input.gif)
	
$par
	
The complex input settings dialog have several options:

$par

$list(
	$item filter
	$list(
		$item nearest: no interpolation
		$item linear: linear interpolation)
	$item Wrap S
	$list(
		$item clamp: stop horizontally when outside the (0,0) to (1,1) range
		$item repeat: repeat horizontally when outside the (0,0) to (1,1) range
		$item mirrored repeat: same as repeat but mirrored)
	$item Wrap T
	$list(
		$item clamp: stop vertically when outside the (0,0) to (1,1) range
		$item repeat: repeat vertically when outside the (0,0) to (1,1) range
		$item mirrored repeat: same as repeat but mirrored)
	$item VFlip: flip the texture vertically)

Note: The "repeat" and "mirrored" Wrap S/T option will be unavailable if your browser does not support the WebGL 2 API, it is only available by adding images with power-of-2 dimensions (128x64, 256x256 etc.) or by using a browser with WebGL 2 support.

$p

$subsection(analysis)(Analysis dialog)

$par

The analysis dialog is a real-time spectogram view of the audio output.

$p

Note: When FAS is enabled, no spectrogram will be shown.

$p

$tlink($center($image(600)(gif/analysis_dialog.gif)))(gif/analysis_dialog.gif)

$par

$subsection(codeditor)(The code editor)

$par

The fragment editor is one of the most important tool of Fragment since it allow the user to generate the visuals which are fed to the additive synthesis engine.

$p

$tlink(GLSL)(https://www.khronos.org/files/opengles_shading_language.pdf) code is what you type in the code editor to generate the visuals.

$p

The fragment program is compiled as you type in the code editor without interrupting sounds/visuals output even if an error is present, this enable powerful live coding.

$p

The changes that you make in the code editor are automatically saved per named sessions, changes are also synchronized in real-time between all the users of the session you are currently in, this is the collaborative nature of Fragment.

$p

The code editor is powered by the CodeMirror library, it feature many neat things such as:

$list(
	$item GLSL syntax highlighting
	$item highlight matches
	$item brackets/parentheses opening/end highlights
	$item fullscreen editor by pressing F11
	$item integrated compilation errors/messages (does not interrupt sounds/visuals)
	$item line numbers
	$item many bundled editor themes)
	
Some of the code editor features can be enabled/disabled in the $ref(globalsettingsdialog)(global settings dialog).

$p

If you experience audio stuttering as you type, it is recommended to detach the code editor off the main window, due to the complexity of the web and the complexity of the Fragment application, many things are not as optimal as they should be.

$p

$subsection(midilearn)(MIDI learn functionality)

$par

MIDI learn is a neat feature of Fragment which enable any MIDI learn enabled widget to be controlled by a MIDI controller.

$p

$tlink($center($image(104)(images/midi_learn.png)))(images/midi_learn.png)
$center(The red square indicate MIDI learn functionality support for this widget)

$par

The red square appearing on an UI interface widget indicate that the MIDI learn functionality is supported for the widget, it only appear on WebMIDI enabled browsers such as Chrome and Opera and on widgets which are allowed to be controlled by MIDI.

$p

By left clicking on the red square, it turn green and any inputs from the $ref(midisettingsdialog)(enabled MIDI devices) will be captured by the widget.

$p

Once the MIDI input is captured, the green square become red again (which is a locked state) and the MIDI control will be assigned to the widget.

$p

It is possible to reset the MIDI control assigned to the widget by clicking on the red square and clicking again on the green square aka double clicking.

$p

$subsection(globalsettingsdialog)(The session/global settings dialog)

$par

$tlink($center($image(347)(images/settings.png)))(images/settings.png)

$par

The session & global settings dialog content (in order from top to bottom):

$list(
	$item Score width
	$list(
		$item The score width in pixels units)
	$item Score height
	$list(
		$item The score height in pixels units
		$item Higher height = better resolution in term of frequencies)
	$item Score base frequency
	$list(
		$item Determine the base frequency in hertz units)
	$item Score octave range
	$list(
		$item Control the range of frequencies)
	$item Osc. fadeout
	$list(
		$item WebAudio fadeout time (like "release" parameter in other synts, WebAudio oscillators only))
	$item Polyphony
	$list(
		$item Maximum polyphony)
	$item Show globalTime
	$list(
		$item Hide/Show the globalTime in the informations bar)
	$item Show osc. infos
	$list(
		$item Hide/Show the number of oscillators playing simultaneously in the informations bar)
	$item Show poly. infos
	$list(
		$item Hide/Show the polyphony infos for per output channels in the informations bar)
	$item Show slices bar
	$list(
		$item Hide/Show slices vertical bar)
	$item Show line numbers
	$list(
		$item Hide/Show the line number in the code editor)
	$item Advanced scrollbar
	$list(
		$item Enable/disable a better looking scrollbar for the code editor)
	$item Highlight matches
	$list(
		$item Enable/disable matches highlight in the code editor (when something is selected))
	$item Show slices
	$list(
		$item Hide/Show slices, can be useful for visuals, this settings is not saved)
	$item Monophonic
	$list(
		$item Enable/disable monophonic mode
		$item If monophonic is enabled, only the alpha value is used by the synthesis engine, the full RGB output can then be used for visuals)
	$item Wavetable
	$list(
		$item Enable/disable the synthesis engine wavetable feature (uglier audio output but may be the less CPU intensive mode))
	$item Editor theme
	$list(
		$item A list of themes for the code editor)
	$item FAS address
	$list(
		$item The location of $ref(fas)(FAS (Fragment Audio Server)) on the network))

$subsection(midisettingsdialog)(MIDI settings dialog)

$par

$tlink($center($image(325)(images/midi_settings.png)))(images/midi_settings.png)

$par

The MIDI settings dialog show all the MIDI input devices found at this time, by default there is no MIDI input devices enabled, you can enable MIDI devices by checking the checkbox below the MIDI device name.

$p

Once enabled, Fragment will receive any MIDI messages from that device.

$p

Fragment support hot plugging of MIDI devices, any MIDI devices which are plugged or unplugged while Fragment is running will be added or removed in the MIDI settings dialog.

$p

Fragment keep track of your MIDI settings choice for particual devices per sessions, this mean that if a MIDI device is enabled, when you quit Fragment or that the MIDI device is unplugged and you launch again Fragment and that the MIDI device is plugged in, Fragment will enable it automatically.

$p

$subsection(sessionchat)(Session chat dialog)

$par

$tlink($center($image(600)(images/session_chat.png)))(images/session_chat.png)

$par

The session chat dialog allow discussions with all users in the current session.

$p

It is a simple but effective chatbox that you can resize, move around or detach. it has three parts:

$list(
	$item messages list
	$item users list
	$item input)

The green user in the user list indicate yourself.

$p

You can send a message to all users in the session by clicking on the input then typing your message and pressing ENTER.

$p

$subsection(uniformsdialog)(Uniforms dialog)

$par

The uniforms dialog is a very powerful functionality.

$p

It enable you to define fragment program uniforms (aka variables) which are synced with all users in the session and are controllable by any MIDI input devices enabled.

$p

All the uniforms added will be shown in the uniforms dialog and will be defined automatically in the fragment program, you can then just use the symbol name in the code editor.

$p

You can add the following scalar uniforms types:

$list(
	$item bool
	$item int
	$item float)
	
If count is higher than 1, Fragment will add the scalar uniforms as an array.

$p
	
You can also add vector uniforms of the following types (note: the components field determine the number of components for the following uniform type):

$list(
	$item bvec2
	$item bvec3
	$item bvec4
	$item ivec2
	$item ivec3
	$item ivec4
	$item vec2
	$item vec3
	$item vec4)

If count is higher than 1, Fragment will add the vector uniforms as an array.

$p

$section(gpuprogramming)(How to produce sounds by programming your GPU)

Fragment usage of the GPU is restricted to a single fragment program which will be executed for each pixels of the graphical score.

$p

The fragment program is written in GLSL (OpenGL Shading Language) which has a syntax quite similar to the C language but is much simpler to learn.

$p

You can do anything from ray-traced 3D to drawing simple lines and define their behaviors with Fragment.

$p

If you want to design sounds with Fragment, you will probably want to define the in/harmonics and their behaviors with curves altough it is possible to design sounds by other methods.

$p

Fragment has many pre-defined uniforms variable which can be used to animate and interact with things, here are all the pre-defined uniforms that you can use directly in the code editor:

$list(
	$item -)
	
$par



$p

$section(tipsntricks)(Tips'n'tricks)

$par

$subsection(bezier)(Cubic bezier curves)

$p

$section(example)(Example)

$par

$section(contribute)(Contributing)

Fragment is a free and open source software released under the term of the BSDv2 license.

$p

Any contributions from the documentation to the synthesis engine are welcome!

$p

The source code is available on $tlink(GitHub)(https://github.com/grz0zrg/fsynth).

$par

$ref(fas)(FAS) source code is also available on $tlink(GitHub)(https://github.com/grz0zrg/fas).

$p

$section(links)(Links)

$list(
	$item $tlink(Fragment Synthesizer website)(https://www.fsynth.com)
	$item $tlink(Fragment Synthesizer forum)(https://quiet.fsynth.com)
	$item $tlink(Fragment source code)(https://github.com/grz0zrg/fsynth)
	$item $tlink(FAS source code)(https://github.com/grz0zrg/fas)
	$item $tlink(Facebook)(https://www.facebook.com/fsynth/)
	$item $tlink(YouTube)(https://www.youtube.com/channel/UC2CJFT1_ybPcTNlT6bVG0WQ)
	$item $tlink(Twitter)(https://twitter.com/fragmentsynth)
	$item $tlink(SoundCloud)(https://soundcloud.com/fsynth/))
	
$section(credits)(Credits)

$list(
	$item Testing: $list($item Franz Khrum)
	$item Ideas: $list(
		$item $tlink(Virtual ANS)(http://www.warmplace.ru/soft/ans/)
		$item $tlink(ShaderToy)(https://www.shadertoy.com/))
	$item Tools: $list(
		$item $tlink(The Anubis programming language)(http://redmine.anubis-language.com/)
		$item $tlink(Inkscape)(https://www.inkscape.org)
		$item $tlink(Geogebra)(https://www.geogebra.org)
		$item $tlink(The GIMP)(https://www.gimp.org)
		$item $tlink(KDEnlive)(https://kdenlive.org)
		$item $tlink(SimpleScreenRecorder)(http://www.maartenbaert.be/simplescreenrecorder/)
		$item $tlink(libflds)(http://liblfds.org)
		$item $tlink(portaudio)(http://www.portaudio.com)
		$item $tlink(libwebsockets)(https://libwebsockets.org)
		$item $tlink(Brackets)(http://brackets.io/)
		$item $tlink(fa2png)(http://fa2png.io/)
		$item $tlink(FontAwesome)(http://fontawesome.io/)
		$item $tlink(CodeMirror)(http://codemirror.net/)
		$item $tlink(ShareDB)(https://github.com/share/sharedb/)
		$item $tlink(live-server)(https://www.npmjs.com/package/live-server)
		$item $tlink(Normalize)(https://necolas.github.io/normalize.css/)
		$item $tlink(Skeleton)(http://getskeleton.com/)
		$item $tlink(NodeJS)(https://nodejs.org/en/)
		$item $tlink(NGINX)(https://www.nginx.com/)
		$item $tlink(Flarum)(http://flarum.org/)
		$item $tlink(pm2)(https://github.com/Unitech/pm2)
		$item $tlink(MongoDB)(https://www.mongodb.com/)
		$item $tlink(Redis)(https://redis.io/)
		$item $tlink(Winston)(https://github.com/winstonjs/winston)
		$item $tlink(Express)(http://expressjs.com/)
		$item $tlink(strong-cluster-control)(https://github.com/strongloop/strong-cluster-control)))
$par

$center($big($big($big($big($colorize(funny)(Thank you!))))))
$par
$center(last update: 2017-05-03)

$end